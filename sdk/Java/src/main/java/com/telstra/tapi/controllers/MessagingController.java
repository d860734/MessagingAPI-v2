/*
 * TelstraMessagingAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.telstra.tapi.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import com.telstra.tapi.*;
import com.telstra.tapi.models.*;
import com.telstra.tapi.exceptions.*;
import com.telstra.tapi.http.client.HttpClient;
import com.telstra.tapi.http.client.HttpContext;
import com.telstra.tapi.http.request.HttpRequest;
import com.telstra.tapi.http.response.HttpResponse;
import com.telstra.tapi.http.response.HttpStringResponse;
import com.telstra.tapi.http.client.APICallBack;
import com.telstra.tapi.controllers.syncwrapper.APICallBackCatcher;

public class MessagingController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static MessagingController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the MessagingController class 
     */
    public static MessagingController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new MessagingController();
            }
        }
        return instance;
    }

    /**
     * Get Message Status
     * @param    messageId    Required parameter: Unique identifier of a message - it is the value returned from a previous POST call to https://api.telstra.com/v2/messages/sms
     * @return    Returns the OutboundPollResponse response from the API call 
     */
    public OutboundPollResponse getSMSStatus(
                final String messageId
    ) throws Throwable {
        APICallBackCatcher<OutboundPollResponse> callback = new APICallBackCatcher<OutboundPollResponse>();
        getSMSStatusAsync(messageId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get Message Status
     * @param    messageId    Required parameter: Unique identifier of a message - it is the value returned from a previous POST call to https://api.telstra.com/v2/messages/sms
     * @return    Returns the void response from the API call 
     */
    public void getSMSStatusAsync(
                final String messageId,
                final APICallBack<OutboundPollResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/messages/sms/{messageId}/status");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5750634932796244383L;
            {
                    put( "messageId", messageId );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5664933506964927836L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", OAuthManager.getInstance().getAuthorizationHeader());
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new ErrorErrorErrorException("Invalid or missing request parameters", _context);

                            if (_responseCode == 401)
                                throw new ErrorErrorErrorException("Invalid or no credentials passed in the request", _context);

                            if (_responseCode == 403)
                                throw new ErrorErrorErrorException("Authorization credentials passed and accepted but account does not have permission", _context);

                            if (_responseCode == 404)
                                throw new ErrorErrorErrorException("The requested URI does not exist", _context);

                            if (_responseCode == 405)
                                throw new ErrorErrorErrorException("The requested resource does not support the supplied verb", _context);

                            if (_responseCode == 415)
                                throw new ErrorErrorErrorException("API does not support the requested content type", _context);

                            if (_responseCode == 422)
                                throw new ErrorErrorErrorException("The request is formed correctly, but due to some condition the request cannot be processed e.g. email is required and it is not provided in the request", _context);

                            if (_responseCode == 501)
                                throw new ErrorErrorErrorException("The HTTP method being used has not yet been implemented for the requested resource", _context);

                            if (_responseCode == 503)
                                throw new ErrorErrorErrorException("The service requested is currently unavailable", _context);

                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new ErrorErrorErrorException("An internal error occurred when processing the request", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            OutboundPollResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<OutboundPollResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Retrieve Messages
     * @return    Returns the List<InboundPollResponse> response from the API call 
     */
    public List<InboundPollResponse> retrieveSMSResponses(
    ) throws Throwable {
        APICallBackCatcher<List<InboundPollResponse>> callback = new APICallBackCatcher<List<InboundPollResponse>>();
        retrieveSMSResponsesAsync(callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Retrieve Messages
     * @return    Returns the void response from the API call 
     */
    public void retrieveSMSResponsesAsync(
                final APICallBack<List<InboundPollResponse>> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/messages/sms");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5514170604523555982L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", OAuthManager.getInstance().getAuthorizationHeader());
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new ErrorErrorErrorException("Invalid or missing request parameters", _context);

                            if (_responseCode == 401)
                                throw new ErrorErrorErrorException("Invalid or no credentials passed in the request", _context);

                            if (_responseCode == 403)
                                throw new ErrorErrorErrorException("Authorization credentials passed and accepted but account does not have permission", _context);

                            if (_responseCode == 404)
                                throw new ErrorErrorErrorException("The requested URI does not exist", _context);

                            if (_responseCode == 405)
                                throw new ErrorErrorErrorException("The requested resource does not support the supplied verb", _context);

                            if (_responseCode == 415)
                                throw new ErrorErrorErrorException("API does not support the requested content type", _context);

                            if (_responseCode == 422)
                                throw new ErrorErrorErrorException("The request is formed correctly, but due to some condition the request cannot be processed e.g. email is required and it is not provided in the request", _context);

                            if (_responseCode == 501)
                                throw new ErrorErrorErrorException("The HTTP method being used has not yet been implemented for the requested resource", _context);

                            if (_responseCode == 503)
                                throw new ErrorErrorErrorException("The service requested is currently unavailable", _context);

                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new ErrorErrorErrorException("An internal error occurred when processing the request", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            List<InboundPollResponse> _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<List<InboundPollResponse>>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Send Message
     * @param    payload    Required parameter: A JSON or XML payload containing the recipient's phone number and text message.  The recipient number should be in the format '04xxxxxxxx' where x is a digit
     * @return    Returns the MessageSentResponse response from the API call 
     */
    public MessageSentResponse createSendSMS(
                final SendSMSRequest payload
    ) throws Throwable {
        APICallBackCatcher<MessageSentResponse> callback = new APICallBackCatcher<MessageSentResponse>();
        createSendSMSAsync(payload, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Send Message
     * @param    payload    Required parameter: A JSON or XML payload containing the recipient's phone number and text message.  The recipient number should be in the format '04xxxxxxxx' where x is a digit
     * @return    Returns the void response from the API call 
     */
    public void createSendSMSAsync(
                final SendSMSRequest payload,
                final APICallBack<MessageSentResponse> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/messages/sms");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5591652762921984112L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", OAuthManager.getInstance().getAuthorizationHeader());
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(payload));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new ErrorErrorErrorException("Invalid or missing request parameters", _context);

                            if (_responseCode == 401)
                                throw new ErrorErrorErrorException("Invalid or no credentials passed in the request", _context);

                            if (_responseCode == 403)
                                throw new ErrorErrorErrorException("Authorization credentials passed and accepted but account does not have permission", _context);

                            if (_responseCode == 404)
                                throw new ErrorErrorErrorException("The requested URI does not exist", _context);

                            if (_responseCode == 405)
                                throw new ErrorErrorErrorException("The requested resource does not support the supplied verb", _context);

                            if (_responseCode == 415)
                                throw new ErrorErrorErrorException("API does not support the requested content type", _context);

                            if (_responseCode == 422)
                                throw new ErrorErrorErrorException("The request is formed correctly, but due to some condition the request cannot be processed e.g. email is required and it is not provided in the request", _context);

                            if (_responseCode == 501)
                                throw new ErrorErrorErrorException("The HTTP method being used has not yet been implemented for the requested resource", _context);

                            if (_responseCode == 503)
                                throw new ErrorErrorErrorException("The service requested is currently unavailable", _context);

                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new ErrorErrorErrorException("An internal error occurred when processing the request", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            MessageSentResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<MessageSentResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get MMS Status
     * @param    messageid    Required parameter: Unique identifier of a message - it is the value returned from a previous POST call to https://api.telstra.com/v2/messages/mms
     * @return    Returns the OutboundPollResponse response from the API call 
     */
    public OutboundPollResponse getMMSStatus(
                final String messageid
    ) throws Throwable {
        APICallBackCatcher<OutboundPollResponse> callback = new APICallBackCatcher<OutboundPollResponse>();
        getMMSStatusAsync(messageid, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get MMS Status
     * @param    messageid    Required parameter: Unique identifier of a message - it is the value returned from a previous POST call to https://api.telstra.com/v2/messages/mms
     * @return    Returns the void response from the API call 
     */
    public void getMMSStatusAsync(
                final String messageid,
                final APICallBack<OutboundPollResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/messages/mms/{messageid}/status");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5034428805916637167L;
            {
                    put( "messageid", messageid );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5543091415469180334L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", OAuthManager.getInstance().getAuthorizationHeader());
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new ErrorErrorErrorException("Invalid or missing request parameters", _context);

                            if (_responseCode == 401)
                                throw new ErrorErrorErrorException("Invalid or no credentials passed in the request", _context);

                            if (_responseCode == 403)
                                throw new ErrorErrorErrorException("Authorization credentials passed and accepted but account does not have permission", _context);

                            if (_responseCode == 404)
                                throw new ErrorErrorErrorException("The requested URI does not exist", _context);

                            if (_responseCode == 405)
                                throw new ErrorErrorErrorException("The requested resource does not support the supplied verb", _context);

                            if (_responseCode == 415)
                                throw new ErrorErrorErrorException("API does not support the requested content type", _context);

                            if (_responseCode == 422)
                                throw new ErrorErrorErrorException("The request is formed correctly, but due to some condition the request cannot be processed e.g. email is required and it is not provided in the request", _context);

                            if (_responseCode == 501)
                                throw new ErrorErrorErrorException("The HTTP method being used has not yet been implemented for the requested resource", _context);

                            if (_responseCode == 503)
                                throw new ErrorErrorErrorException("The service requested is currently unavailable", _context);

                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new ErrorErrorErrorException("An internal error occurred when processing the request", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            OutboundPollResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<OutboundPollResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Send MMS
     * @param    body    Required parameter: A JSON or XML payload containing the recipient's phone number and MMS message.The recipient number should be in the format '04xxxxxxxx' where x is a digit
     * @return    Returns the MessageSentResponse response from the API call 
     */
    public MessageSentResponse createSendMMS(
                final SendMMSRequest body
    ) throws Throwable {
        APICallBackCatcher<MessageSentResponse> callback = new APICallBackCatcher<MessageSentResponse>();
        createSendMMSAsync(body, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Send MMS
     * @param    body    Required parameter: A JSON or XML payload containing the recipient's phone number and MMS message.The recipient number should be in the format '04xxxxxxxx' where x is a digit
     * @return    Returns the void response from the API call 
     */
    public void createSendMMSAsync(
                final SendMMSRequest body,
                final APICallBack<MessageSentResponse> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/messages/mms");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4693744639603948254L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", OAuthManager.getInstance().getAuthorizationHeader());
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new APIException("Invalid or missing request parameters", _context);

                            if (_responseCode == 401)
                                throw new ErrorErrorErrorException("Invalid or no credentials passed in the request", _context);

                            if (_responseCode == 403)
                                throw new ErrorErrorErrorException("Authorization credentials passed and accepted but account does not have permission", _context);

                            if (_responseCode == 404)
                                throw new ErrorErrorErrorException("The requested URI does not exist", _context);

                            if (_responseCode == 405)
                                throw new ErrorErrorErrorException("The requested resource does not support the supplied verb", _context);

                            if (_responseCode == 415)
                                throw new ErrorErrorErrorException("API does not support the requested content type", _context);

                            if (_responseCode == 422)
                                throw new ErrorErrorErrorException("The request is formed correctly, but due to some condition the request cannot be processed e.g. email is required and it is not provided in the request", _context);

                            if (_responseCode == 501)
                                throw new ErrorErrorErrorException("The HTTP method being used has not yet been implemented for the requested resource", _context);

                            if (_responseCode == 503)
                                throw new ErrorErrorErrorException("The service requested is currently unavailable", _context);

                            if ((_responseCode < 200) || (_responseCode > 208))
                                throw new ErrorErrorErrorException("An internal error occurred when processing the request", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            MessageSentResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<MessageSentResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}